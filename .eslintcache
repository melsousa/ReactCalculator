[{"C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\index.js":"1","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\App.js":"2","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\reportWebVitals.js":"3","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\main\\Calculator.jsx":"4","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\components\\Button.jsx":"5","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\components\\Display.jsx":"6"},{"size":617,"mtime":1610312362908,"results":"7","hashOfConfig":"8"},{"size":528,"mtime":1608672150723,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608672150723,"results":"10","hashOfConfig":"8"},{"size":4518,"mtime":1610413290002,"results":"11","hashOfConfig":"8"},{"size":520,"mtime":1610476767395,"results":"12","hashOfConfig":"8"},{"size":131,"mtime":1610407015025,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"42gtj9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\index.js",[],["31","32"],"C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\App.js",[],"C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\reportWebVitals.js",[],"C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\main\\Calculator.jsx",["33"],"import React, { Component } from 'react';\r\nimport Button from '../components/Button';\r\nimport Display from '../components/Display';\r\nimport './Calculator.css';\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n    state = { ...initialState }\r\n    constructor(props) {\r\n        super(props); //sempre chamar o super \r\n        this.clearMemory = this.clearMemory.bind(this);\r\n        this.setOperation = this.setOperation.bind(this);\r\n        this.addDigit = this.addDigit.bind(this);\r\n    }\r\n    clearMemory() {\r\n        this.setState({ ...initialState });\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if (this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === '=' //quando o usuario clicar em igual\r\n            const currentOperation = this.state.operation //já tem uma operação e está chamando de novo outra operação\r\n\r\n            const values = [...this.state.values] //pegando os valores do array\r\n            try{\r\n                //eval pode gerar um efeito colateral\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`) //pegando o primeiro valor + a operação e depois o segundo valor\r\n            }catch(e){\r\n                values[0] = this.state.values[0] //pegando valor do estado atual\r\n            }\r\n            \r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation, //se for um equals a operação finalizou, se não vai ser um operation\r\n                current: equals ? 0 : 1, \r\n                clearDisplay: !equals, //se for diferente de equals ele vai limpar o display e se não for o usuário vai continuar mechendo\r\n                values \r\n\r\n            })\r\n        }\r\n    }\r\n    addDigit(n) {\r\n        if (n === '.' && this.state.displayValue.includes('.')) {//evitar colocar 2 pontos\r\n            return;//se o usuario digitou um ponto e na operação já tem um ponto não vai retornar nada\r\n        }\r\n        const clearDisplay = this.state.displayValue === '0' //so vai está verdadeiro se o display for zero ou a flag do estado for verdadeiro\r\n            || this.state.clearDisplay; //para evitar os zeros a esquerda\r\n\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue; //se precisar limpar o display vai ser vazio ou o valor que esta no display \r\n        const displayValue = currentValue + n;//valor atual + valor novo digitado \r\n        this.setState({ displayValue, clearDisplay: false });\r\n\r\n        if (n !== '.') { //se for diferente de . significa que é um número de 0 a 9\r\n            const i = this.state.current;\r\n            const newValue = parseFloat(displayValue);\r\n            const values = [...this.state.values]; //clonando o valor para um novo array \r\n            values[i] = newValue;\r\n            this.setState({ values });\r\n            console.log(values);\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue}></Display>\r\n                <Button label=\"AC\" click={this.clearMemory} triple /> {/*click recebe uma arrow function apontando para clearMemory */}\r\n                <Button label=\"/\" click={this.setOperation} operation />\r\n                <Button label=\"7\" click={this.addDigit} />\r\n                <Button label=\"8\" click={this.addDigit} />\r\n                <Button label=\"9\" click={this.addDigit} />\r\n                <Button label=\"*\" click={this.setOperation} operation />\r\n                <Button label=\"4\" click={this.addDigit} />\r\n                <Button label=\"5\" click={this.addDigit} />\r\n                <Button label=\"6\" click={this.addDigit} />\r\n                <Button label=\"-\" click={this.setOperation} operation />\r\n                <Button label=\"1\" click={this.addDigit} />\r\n                <Button label=\"2\" click={this.addDigit} />\r\n                <Button label=\"3\" click={this.addDigit} />\r\n                <Button label=\"+\" click={this.setOperation} operation />\r\n                <Button label=\"0\" click={this.addDigit} double />\r\n                <Button label=\".\" click={this.addDigit} />\r\n                <Button label=\"=\" click={this.setOperation} operation />\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\components\\Button.jsx",["34"],"import React from 'react';\r\nimport './Button.css';\r\n\r\nexport default props => {//QUANDO NÃO COLOCA O RETORNO E SÓ OS PARENTESES DA ERRO\r\n    let classes = 'button '\r\n    classes += props.operation ? 'operation' : ' ';\r\n    classes += props.double ? 'double' : ' ';\r\n    classes += props.triple ? 'triple' : ' ';\r\n\r\n    return (\r\n        <button className={classes} \r\n        onClick={e => props.click && props.click(props.label)}>\r\n\r\n            {props.label}\r\n        </button>\r\n\r\n    )\r\n}\r\n\r\n// colocando codigo js\r\n","C:\\Users\\Acer\\OneDrive\\react\\calculadora\\src\\components\\Display.jsx",["35"],"import React from 'react';\r\n\r\nimport './Display.css';\r\n\r\nexport default props =>\r\n    <div className=\"display\">{props.value} </div>",["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":36,"column":29,"nodeType":"44","messageId":"45","endLine":36,"endColumn":33},{"ruleId":"46","severity":1,"message":"47","line":4,"column":1,"nodeType":"48","endLine":18,"endColumn":2},{"ruleId":"46","severity":1,"message":"47","line":5,"column":1,"nodeType":"48","endLine":6,"endColumn":50},{"ruleId":"38","replacedBy":"49"},{"ruleId":"40","replacedBy":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-eval","eval can be harmful.","CallExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["51"],["52"],"no-global-assign","no-unsafe-negation"]